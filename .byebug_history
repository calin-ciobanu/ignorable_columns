exit
c
exit
actual.call.last
exit
actual.call.explain
actual.call
c
@test_model.all
all_columns.map(&:name) - excluded
all_columns.map(&:name) - excluded)
excluded
c
raw_explanation
n
c
table
column
raw_explanation.split("\n")
@select_queries
n
raw_explanation
c
all_columns.map(&:name) - excluded
excluded
c
cols
(all_columns.map(&:name) - excluded)
(all_columns.map(&:name) - excluded
c
excluded
c
line
c
"\"#{table.to_s}\".\"#{column.to_s}\""
 (line.include?("\"#{table.to_s}\".\"#{column.to_s}\"") || line.include?("\"#{table.to_s}\".\"*\""))
line.include?('EXPLAIN for:')
line
c
table
actual.call.explain
actual
TestModel.all.explain
select_queries
c
expect(results['updated_at']).to eq an_instance_of(String)
expect(results['updated_at']).to be an_instance_of(String)
c
@orig_default_scopes
c
def testm
try
self.class.name
self.class
self.classname
self.class_name
self.name
self
TestModel.column_names.sort
TestModel.column_names
(all_columns.map(&:name) - excluded)
self.select(*(all_columns.map(&:name) - excluded))
select(*(all_columns.map(&:name) - excluded))
default_scope { select(*(all_columns.map(&:name) - excluded)) }
all_columns.map(&:name) - excluded
c
@columns
c
@columns
c
@columns
n
ignored_columns
@columns
c
super.reject { |col| ignored_column?(col) }
n
@columns
c
n
super.reject { |col| ignored_column?(col) }
@all_columns
n
c
TestModel.instance_variable_get(:@columns).map(&:name)
TestModel.instance_variable_get(:@columns)
TestModel.ignored_columns
TestModel.instance_variable_get(:@ignored_columns)
TestModel.column_names
TestModel.last
TestModel.column_names
c
TestModel.new.attributes
TestModel.columns.map(&:name)
TestModel.column_names
